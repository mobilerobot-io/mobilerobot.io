<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software on Mobile Robot I/O</title>
    <link>http://mobilerobot.io/categories/software/</link>
    <description>Recent content in Software on Mobile Robot I/O</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 05 Apr 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://mobilerobot.io/categories/software/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Otto the Pluggable Micro-Server for Micro-Controllers</title>
      <link>http://mobilerobot.io/projects/otto-micro-server-for-micro-controllers/</link>
      <pubDate>Fri, 05 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>http://mobilerobot.io/projects/otto-micro-server-for-micro-controllers/</guid>
      <description> Otto is a micro service with Routing, Logging and configuration right out of the box. Additional routes can be registered, via plugins written to satisfy a very simple interface.
The Otto repository is here along with some example plugins.
Plugins  Echo Wally the website walker Store the object storage, cloud aware storage library Dork for managing Digital Ocean infrastructure  What else can otto do?  Join in on MQTT groups  </description>
    </item>
    
    <item>
      <title>OpenCV Installing and Getting Started on Raspberry Pi</title>
      <link>http://mobilerobot.io/notes/opencv-getting-started/</link>
      <pubDate>Thu, 04 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>http://mobilerobot.io/notes/opencv-getting-started/</guid>
      <description>Install OpenCV on a raspberry pie, at least how I have been trying to do it, by downloading the source code and building has been a very tedious task, for which I have yet to celebrate any form of success.
On to Plan B Therefore I think I am going to head off and try plan B, for now Plan B is one of the following three options:
 Use PXE to boot The raspberry pie and mount the file systems over NFS.</description>
    </item>
    
    <item>
      <title>Store the Simple but Powerful Object Storage Library</title>
      <link>http://mobilerobot.io/projects/store/</link>
      <pubDate>Tue, 02 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>http://mobilerobot.io/projects/store/</guid>
      <description>These days, it is hard to assume anything about the platform that we may be developing on. For example, an Arduino or Cloud Native applicaiton might not have a local disk to write to.
Source code for store is here
Or an perhaps an embedded micro controller may temporarily not have access to the internet and need temporary storage. These cases need to be taken into account in addition to the traditional &amp;ldquo;persistance&amp;rdquo; issues need to be delt with.</description>
    </item>
    
    <item>
      <title>RF Remote Control</title>
      <link>http://mobilerobot.io/projects/rf-remote-control/</link>
      <pubDate>Wed, 27 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://mobilerobot.io/projects/rf-remote-control/</guid>
      <description>Project Definition Our mobile robot is going to need a remote control, may as well be a joystick. Yes, we do have high hopes of getting the vehicle to drive itself, we are still going to support a Human controlled switch over.
Following is a quick-n-dirty block diagram of the project design.
RF Remote Control Electronics The first pass at the remote control will be a single joystick on the RC station.</description>
    </item>
    
    <item>
      <title>Arduino Interupts</title>
      <link>http://mobilerobot.io/notes/arduino-interupts/</link>
      <pubDate>Fri, 22 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://mobilerobot.io/notes/arduino-interupts/</guid>
      <description>Nick Gammon does a great job describing interupts on the Arduino, when and I why you might want to use them. As an overly summarized version, if you want to be able to get a notification when data has arrived without having to sleep and poll for data.
Talk about Ardiuno interupts, non-blocking I/O and Nearly Real Time OS. This is a very good, and very indepth article.
TODO: Add some code snippets as examples for running external engines.</description>
    </item>
    
    <item>
      <title>Large Scale Video Delivery</title>
      <link>http://mobilerobot.io/notes/mcast-video-delivery/</link>
      <pubDate>Wed, 22 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>http://mobilerobot.io/notes/mcast-video-delivery/</guid>
      <description>&lt;p&gt;I lead a team at Cisco Systems to build a system that would deliver
streaming video to millions of users, simultaneously. That same
technology has been used by DIRECTV, TimeWarner Cable, AT&amp;amp;T and
other major&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>TFTP Display with Adafruit 2.8 LCD</title>
      <link>http://mobilerobot.io/notes/rpi-adafruit-tftp-display/</link>
      <pubDate>Thu, 02 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>http://mobilerobot.io/notes/rpi-adafruit-tftp-display/</guid>
      <description>&lt;p&gt;The number #1 thing to make sure of is select the first option in the ADA TFT
function.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Sensor Networks</title>
      <link>http://mobilerobot.io/notes/sensor-networks/</link>
      <pubDate>Sun, 15 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>http://mobilerobot.io/notes/sensor-networks/</guid>
      <description> TODO: write ups  sierra hydrographics ACOE GOES software timeseries databases example sensor network around the house (throw in hardware)  </description>
    </item>
    
    <item>
      <title>Requirements ~ The Controller</title>
      <link>http://mobilerobot.io/notes/reqs-controller/</link>
      <pubDate>Sun, 04 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>http://mobilerobot.io/notes/reqs-controller/</guid>
      <description>The controller has two primary parts, the hardware and sofware elements. A good system design, like ours will separate the specific hardware and the controlling software.
Hardware Requirements  wireless ~ but which  The vehicle will be automous, hence it needs to be free of tethers, both electronics, controls and power.
 must be responsive, there should be no (minimized) percievable delay from  TODO: Determine HW Control type There are a number of choices to select for HW control, RFI seems to be a good candidate.</description>
    </item>
    
    <item>
      <title>Robotics and IoT</title>
      <link>http://mobilerobot.io/notes/robotics/</link>
      <pubDate>Thu, 01 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>http://mobilerobot.io/notes/robotics/</guid>
      <description>&lt;p&gt;The world is full of things that rely on software to work, from
sprinkler systems, to cars and jet airplanes, laptops, cell phones and
drones.  You name it everything. Now lets consider how we use it.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>OpenCV with the PiCamera</title>
      <link>http://mobilerobot.io/projects/picamera-and-opencv/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://mobilerobot.io/projects/picamera-and-opencv/</guid>
      <description>Started working on an the Raspberry Pi camera and transmitting the video to a webpage.</description>
    </item>
    
  </channel>
</rss>