<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mobile Robot Projects on Mobile Robot I/O</title>
    <link>http://mobilerobot.io/projects/</link>
    <description>Recent content in Mobile Robot Projects on Mobile Robot I/O</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 24 Apr 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://mobilerobot.io/projects/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>MQTT For Controllor Communication</title>
      <link>http://mobilerobot.io/projects/mqtt-for-controller-communication/</link>
      <pubDate>Fri, 03 May 2019 00:00:00 +0000</pubDate>
      
      <guid>http://mobilerobot.io/projects/mqtt-for-controller-communication/</guid>
      <description>&lt;p&gt;The MQTT message bus is a simple but critical element of our MBR
software design.  MQTT provides what is know as a &lt;em&gt;publish/suscribe&lt;/em&gt;
or &lt;em&gt;pubsub&lt;/em&gt; model useful for many types of computer communication,
including &lt;em&gt;real time&lt;/em&gt; control software, like we use to drive our
mobile vehicle.  This article will go into detail on our controll
system software and the various components required to make it happen!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Joystick Controls for Mobile Robot</title>
      <link>http://mobilerobot.io/projects/remote-joystick/</link>
      <pubDate>Fri, 26 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>http://mobilerobot.io/projects/remote-joystick/</guid>
      <description>This was a simple but very cool project. Setup an Arduino Nano with a Joystick inputs with an RF output back to a control station (or the vehicle if control software resides on vehical).
Requirements Develop a wireless Remote Control capable of controlling (i.e. send inputs to control software) able to control the vehicles motion.
The Joystick must be able to communicate wirelessley.
 RF - required and PoC is complete Wifi optional and desired Blue Tooth optional and desired  Design Our first cut at the Joystick is very simple.</description>
    </item>
    
    <item>
      <title>Control Station Display</title>
      <link>http://mobilerobot.io/projects/control-station-display/</link>
      <pubDate>Mon, 22 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>http://mobilerobot.io/projects/control-station-display/</guid>
      <description>&lt;p&gt;We are going to build a simple control station that begins with a
Raspberry Pi and connected &lt;em&gt;7 inch touchscreen tablet&lt;/em&gt;.  I have it
setup in &amp;ldquo;kiosk mode&amp;rdquo;, which is basically full page chrome without the
tabs and tool bars etc.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mobile Robot Chassis</title>
      <link>http://mobilerobot.io/projects/rover-chassis/</link>
      <pubDate>Mon, 22 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>http://mobilerobot.io/projects/rover-chassis/</guid>
      <description>I quickly outgrew my first introductory robotics kit. I started with my first Robotic Kit (actually 4 of them), I choose the kits that provided the chassis only, after all, I did not know if I would want to base it on a Raspberry Pi or Arduino (or both), perhaps something else entirely? Follow the story and find out what happened:
Intro Robotic Kits All inclusive Bring Your own Electronics Open Source Software Choosing Your Controller(s) Raspberry Pi ~ Pros and Cons Arduino ~ Pros and Cons Motorsheilds Others Were Rubber Meets the Road 2, 4 or 6 wheels Track Systems Wheels in Track System Number of Motors 1, 2, 4 or 6 wheel drive?</description>
    </item>
    
    <item>
      <title>TLV the Type Length Vector Protocol</title>
      <link>http://mobilerobot.io/projects/tlv/</link>
      <pubDate>Wed, 17 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>http://mobilerobot.io/projects/tlv/</guid>
      <description>&lt;p&gt;TLV is a very simple communication protocol that can be used to send
messages around a complex, distributed system.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Control Station App</title>
      <link>http://mobilerobot.io/projects/control-station-application/</link>
      <pubDate>Sat, 23 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://mobilerobot.io/projects/control-station-application/</guid>
      <description>Our control station will run a 7in touch panel attached to a Raspberry Pi with various periphereals attached. To this end, it is a simple, self contained webserver UI written Go.
Plugins keep it real Otto accepts plugins that allow new functionality to be added by simply implementing the simple interface specific in the interface specification.
Otto GUI Otto comes with a built in GUI (HTML) interface as well as a provide REST interface and MQTT message bus.</description>
    </item>
    
    <item>
      <title>PiCamera Flask Server</title>
      <link>http://mobilerobot.io/projects/pi-camera-flask-server/</link>
      <pubDate>Mon, 04 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://mobilerobot.io/projects/pi-camera-flask-server/</guid>
      <description>I have created a python / Flask based server to run on the Raspberry accepting REST calls to perform application specific functions.
I have created a flask server that will accept REST requests to control the PiCamera, AdaFruitMotorSheild and other stuff.
Refer to the PiCamera documentation here: https://picamera.readthedocs.io/en/release-1.13/.
The software can be found in github repository.
And how to write and operate a flask based server for your project.</description>
    </item>
    
    <item>
      <title>Inexpensive Motor Controllers for Arduino and Raspberry Pi</title>
      <link>http://mobilerobot.io/projects/motor-controllers/</link>
      <pubDate>Wed, 22 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>http://mobilerobot.io/projects/motor-controllers/</guid>
      <description>What are the first things to consider when developing a mobile robot Is how you&amp;rsquo;re going to make it move, and that is typically using motors. The cool thing is that inexpensive electrical motors are plentiful, however putting them to good use is a bit complex, Here we will conquer some of that complexity.
We will consider the following 3 things:
 What type of motor(s) do we need? How are we going to power them?</description>
    </item>
    
    <item>
      <title>Otto the Micro Server ~ Small, Fast and Pluggable!</title>
      <link>http://mobilerobot.io/projects/otto-mico-server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://mobilerobot.io/projects/otto-mico-server/</guid>
      <description>Otto is a small, simple micro-server written in Go. It handles requisit communications and related infra structure required by servers and controllers. The applications and functionality will be provided via pluggins.
Otto can run as a REST server in a data center or the controller on micro-controller type of computer. Otto was developed with the notion that much of the code that makes for a good server (or any application for that matter) requires redundant but import supporting infrastructure.</description>
    </item>
    
  </channel>
</rss>