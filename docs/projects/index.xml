<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Active Projects on Mobile Robot I/O</title>
    <link>http://mobilerobot.io/projects/</link>
    <description>Recent content in Active Projects on Mobile Robot I/O</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 15 Jan 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://mobilerobot.io/projects/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Store the Simple but Powerful Object Storage Library</title>
      <link>http://mobilerobot.io/projects/store/</link>
      <pubDate>Tue, 02 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>http://mobilerobot.io/projects/store/</guid>
      <description>These days, it is hard to assume anything about the platform that we may be developing on. For example, an Arduino or Cloud Native applicaiton might not have a local disk to write to.
Source code for store is here
Or an perhaps an embedded micro controller may temporarily not have access to the internet and need temporary storage. These cases need to be taken into account in addition to the traditional &amp;ldquo;persistance&amp;rdquo; issues need to be delt with.</description>
    </item>
    
    <item>
      <title>RF Remote Control</title>
      <link>http://mobilerobot.io/projects/rf-remote-control/</link>
      <pubDate>Wed, 27 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://mobilerobot.io/projects/rf-remote-control/</guid>
      <description>Project Definition Our mobile robot is going to need a remote control, may as well be a joystick. Yes, we do have high hopes of getting the vehicle to drive itself, we are still going to support a Human controlled switch over.
Following is a quick-n-dirty block diagram of the project design.
RF Remote Control Electronics The first pass at the remote control will be a single joystick on the RC station.</description>
    </item>
    
    <item>
      <title>Onboard Communication Over an I2C Bus</title>
      <link>http://mobilerobot.io/projects/onboard-communications-with-i2c/</link>
      <pubDate>Sun, 24 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://mobilerobot.io/projects/onboard-communications-with-i2c/</guid>
      <description>For reasons documentented in Micro Communicaiton Options and RPI Vs. Arduion we established the reasons why our vehicle will host a couple arduino&amp;rsquo;s and a Raspberry Pi.
Macro to Micro Controller Communication Our basic architecture has the Raspberry Pi controlling show on the Vehical itself. The Arduino&amp;rsquo;s are used to collect sensor inputs then send them to the macro-controller for further processing and storage.
RPI Master Arduino Slave  Sensor Inputs Motor Outputs  Todo A single simple image</description>
    </item>
    
    <item>
      <title>Control Systems</title>
      <link>http://mobilerobot.io/projects/control-system/</link>
      <pubDate>Thu, 14 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://mobilerobot.io/projects/control-system/</guid>
      <description>A key element of building progressive robotics, espcially if you are a Garage Mechanic like me, is having software that can be easily used in a variety different configurations, both hardware and software.
In otherwords, we want to avoid re-writting software as much as possible. It can, arguable be the most time comsuming and complex aspect of many hardware projects.
Resuable Software is Mandatory We certainly do not want to rewrite significant portions of code just because we have introduced a joy stick into our ecosystem.</description>
    </item>
    
    <item>
      <title>The Chasis and Drive Train</title>
      <link>http://mobilerobot.io/projects/chasis-drive-train/</link>
      <pubDate>Tue, 12 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://mobilerobot.io/projects/chasis-drive-train/</guid>
      <description>It has hit me in very clear term, It has occured to me how big of a challenge it is to create the mechanical housing, with all the cooling, cable management, room for power, be modular and easy to maintian.
Oh yea, all the while maintaining the optimized motors, suspension, steering and drive train.
Well here we go. It first started to occur to me after I built the first robot vehical &amp;ldquo;kit&amp;rdquo; when I routed a few wires incorrectly, then wanted to add a couple more components.</description>
    </item>
    
    <item>
      <title>On Vehicle Communication</title>
      <link>http://mobilerobot.io/projects/on-vehicle-communications/</link>
      <pubDate>Mon, 04 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://mobilerobot.io/projects/on-vehicle-communications/</guid>
      <description>One of the first issues that we came against was the specific configurations of the micro-controllers as well and the number and configuration of pins and hardware particulars.
Macro-Micro Controllers The system should be flexible enough to allow one or more macro-controls communicating with one or more micro-controllers.
Communication Mechanism We have a rather complex set of communication requirements, we have signals between sensors, motors and micro-controllers. We also have the communication from the micro-controllers and the macro-controller.</description>
    </item>
    
    <item>
      <title>Zumo Bot Control Mods</title>
      <link>http://mobilerobot.io/projects/zumo/</link>
      <pubDate>Sun, 03 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://mobilerobot.io/projects/zumo/</guid>
      <description>TODO: talk about the changes to the Zumo bot and what they accomplished.
 Project Description
 Circuits used
 Software used
 Mechanical Parts used
 Videos and images of project
  On so forth.</description>
    </item>
    
  </channel>
</rss>