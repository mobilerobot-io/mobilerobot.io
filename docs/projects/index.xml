<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mobile Robot Projects on Mobile Robot I/O</title>
    <link>http://mobilerobot.io/projects/</link>
    <description>Recent content in Mobile Robot Projects on Mobile Robot I/O</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 24 Apr 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://mobilerobot.io/projects/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Raspberry Pi Motor Control Software and Server</title>
      <link>http://mobilerobot.io/projects/rpi-motor-control-service/</link>
      <pubDate>Tue, 14 May 2019 00:00:00 +0000</pubDate>
      
      <guid>http://mobilerobot.io/projects/rpi-motor-control-service/</guid>
      <description>&lt;p&gt;This project was to build a simple automous driving vehical using a
Raspberry Pi and a simple DC motor controller.  That is a single RPi
will act as the macro controller managing communications and making
control decisions.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Arduino Software</title>
      <link>http://mobilerobot.io/projects/arduino-software/</link>
      <pubDate>Wed, 01 May 2019 00:00:00 +0000</pubDate>
      
      <guid>http://mobilerobot.io/projects/arduino-software/</guid>
      <description>Arduino Software My github repo below is contains collection of Arduino code, sketches and libraries that achieve a variety of simple but useful tasks, none are necessarily a project in and of itself, but may be included in a number of projects providing support for specific functionality.
Here is a description of some Arduino code you can find.
Sketches include  esp8266 a series of sketches for the esp8266 chip</description>
    </item>
    
    <item>
      <title>TLV the Type Length Vector Protocol</title>
      <link>http://mobilerobot.io/projects/tlv-and-realitime-communication/</link>
      <pubDate>Wed, 17 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>http://mobilerobot.io/projects/tlv-and-realitime-communication/</guid>
      <description>&lt;p&gt;TLV is a very simple communication protocol that can be used to send
messages around a complex, distributed system.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Control Station App</title>
      <link>http://mobilerobot.io/projects/control-station-webapp/</link>
      <pubDate>Sat, 23 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://mobilerobot.io/projects/control-station-webapp/</guid>
      <description>Our control station will run a 7in touch panel attached to a Raspberry Pi with various periphereals attached. To this end, it is a simple, self contained webserver UI written Go.
Plugins keep it real Otto accepts plugins that allow new functionality to be added by simply implementing the simple interface specific in the interface specification.
Otto GUI Otto comes with a built in GUI (HTML) interface as well as a provide REST interface and MQTT message bus.</description>
    </item>
    
    <item>
      <title>Raspberry Pi Flask and MQTT Master Control Server</title>
      <link>http://mobilerobot.io/projects/rpi-flask-mqtt-server/</link>
      <pubDate>Mon, 04 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://mobilerobot.io/projects/rpi-flask-mqtt-server/</guid>
      <description>&lt;p&gt;This application provides access and control to various Raspberry
devices like the camera, GPIO pins, or a possible MotorShield if
needed.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Raspbery Pi Camera Control Service</title>
      <link>http://mobilerobot.io/projects/rpi-camera-control-service/</link>
      <pubDate>Mon, 04 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://mobilerobot.io/projects/rpi-camera-control-service/</guid>
      <description>I have created a python / Flask based server to run on the Raspberry accepting REST calls to perform application specific functions.
I have created a flask server that will accept REST requests to control the PiCamera, AdaFruitMotorSheild and other stuff.
Refer to the PiCamera documentation here: https://picamera.readthedocs.io/en/release-1.13/.
The software can be found in github repository.
And how to write and operate a flask based server for your project.</description>
    </item>
    
    <item>
      <title>Arduino Motor Control Software</title>
      <link>http://mobilerobot.io/projects/arduino-motor-controllers/</link>
      <pubDate>Wed, 22 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>http://mobilerobot.io/projects/arduino-motor-controllers/</guid>
      <description>Pictured about is the OSEPP v2 Motor Shield which can be used as a functional replacement to the Adafruit v2 motorshield, the motorshield I recommend.
 Source code can be found here http://github.com/mobilerobot-io/arduino/ within the src/mctl directory.
 Arduino Motorsheild and Distributed Controls The software in the repository is to be loaded on an Arduino with either an Adafruit v2 Arduino or OSEPP 6612 MotorShield. The software accepts commands as incoming text strings from one of several possible serial inputs; UART, RF Radio, Blue Tooth, etc.</description>
    </item>
    
    <item>
      <title>Otto the Pluggable Macro Controller Micro Service</title>
      <link>http://mobilerobot.io/projects/otto-master-controller-micro-service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://mobilerobot.io/projects/otto-master-controller-micro-service/</guid>
      <description>Otto is a small, simple micro-server written in Go. It handles requisit communications and related infra structure required by servers and controllers. The applications and functionality will be provided via pluggins.
Otto can run as a REST server in a data center or the controller on micro-controller type of computer. Otto was developed with the notion that much of the code that makes for a good server (or any application for that matter) requires redundant but import supporting infrastructure.</description>
    </item>
    
  </channel>
</rss>